{"version":3,"sources":["components/form-weather.component.js","components/display-weather.component.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","className","onSubmit","e","getWeather","onChange","target","value","name","type","placeholder","Weather","weather","city","country","icon","temperature","min","max","condition","api_key","App","get_WeatherIcon","icons","rangeId","setState","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","convertKelvinToCelsius","k","Math","floor","covertToFahrenheit","cel","location","preventDefault","api","state","axios","get","then","response","data","sys","main","temp","temp_max","temp_min","description","weatherIcon","id","catch","err","console","log","coord","lat","lon","navigator","geolocation","getCurrentPosition","position","loc","coords","latitude","longitude","this","React","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.aa894511.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Form = (props) => {\r\n    return (\r\n        <form className=\"mt-2\" onSubmit={(e) => {props.getWeather(e)}}>\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                    <input onChange={(e) => {props.onChange(e.target.value) }} name=\"city\" type=\"text\"   placeholder=\"Search by city...\" />\r\n                </div>\r\n                <button className=\"btn btn-warning\">Get Weather</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nexport default Form","import React from 'react';\r\n\r\nconst Weather =(props)=>{ \r\n    return (\r\n        <div>\r\n            <div className=\"name\">\r\n        {props.weather.city},{props.weather.country}\r\n    </div>\r\n    <div className=\"weather-icon\">\r\n        <i className={`wi ${props.icon}`}/>\r\n    </div>\r\n    <div className=\"weather\">\r\n        <div className=\"main-weather\">\r\n            <span className=\"temperature\">{props.weather.temperature}<i className=\"wi wi-celsius\"/> </span>\r\n        </div>\r\n        <div className=\"minmax\">\r\n            <span className=\"min-max\">Min {props.weather.min}<i className=\"wi wi-celsius\"/><br/>Max {props.weather.max}<i className=\"wi wi-celsius\"/></span>\r\n        </div>\r\n    </div>\r\n    \r\n    <div className=\"condition\">\r\n            {props.weather.condition}\r\n    </div>\r\n        </div>\r\n    \r\n    \r\n)\r\n}\r\nexport default Weather;\r\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport 'weather-icons/css/weather-icons.css';\nimport Form from './components/form-weather.component'\nimport Weather from './components/display-weather.component'\nimport axios from 'axios';\n\nconst api_key=\"ce06c3f81e1990453b38833c502026cb\";\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      location:'',\n      data:{},\n      coord: {\n        lat:'50',\n        lon:'60'\n      },\n      icon:''\n      \n    }\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    };\n  \n  }\n\n  get_WeatherIcon =(icons, rangeId)=> {\n    switch (true) {\n      case rangeId >= 200 && rangeId < 232:\n        this.setState({ icon: icons.Thunderstorm });\n        break;\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({ icon: icons.Drizzle });\n        break;\n      case rangeId >= 500 && rangeId <= 521:\n        this.setState({ icon: icons.Rain });\n        break;\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({ icon: icons.Snow });\n        break;\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({ icon: icons.Atmosphere });\n        break;\n      case rangeId === 800:\n        this.setState({ icon: icons.Clear });\n        break;\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({ icon: icons.Clouds });\n        break;\n      default:\n        this.setState({ icon: icons.Clouds });\n    }\n  }\n\n  componentDidMount(){\n    if(navigator.geolocation){\n      navigator.geolocation.getCurrentPosition(position =>{\n        \n        var loc = {\n          lat: position.coords.latitude,\n          lon: position.coords.longitude\n        }\n        this.setState({\n          coord: loc\n        })\n        const api =`http://api.openweathermap.org/data/2.5/weather?lat=${this.state.coord.lat}&lon=${this.state.coord.lon}&appid=${api_key}`;\n        axios.get(api)\n        .then(response => {\n          console.log(response)\n          let weather ={\n            city: response.data.name,\n            country:response.data.sys.country,\n            temperature: this.covertToFahrenheit(response.data.main.temp),\n            max: this.covertToFahrenheit(response.data.main.temp_max),\n            min:this.covertToFahrenheit(response.data.main.temp_min),\n            condition: response.data.weather[0].description\n            }\n          this.setState({\n           data: weather\n          }) \n          // seting icons\n          this.get_WeatherIcon(this.weatherIcon, response.data.weather[0].id);\n        })\n        .then(err => console.log(err))\n      })\n    }\n  }\n  convertKelvinToCelsius = (k) => {\n    var celsius = Math.floor(k-273.15);\n    return celsius;\n  }\n  covertToFahrenheit = (k) =>{\n    var cel = k - 273;\n    var far = Math.floor(cel * (9/5) + 32)\n    return far;\n  }\n\n  onChange = (value) =>{\n   this.setState({\n     location:value\n   })\n  }\n\n  getWeather = (e) => {\n    e.preventDefault();\n\n    const api=`http://api.openweathermap.org/data/2.5/weather?q=${this.state.location}&appid=${api_key}`;\n    axios.get(api)\n    .then(response=>{\n   \n    let weather= {\n      city: response.data.name,\n      country:response.data.sys.country,\n      temperature: this.covertToFahrenheit(response.data.main.temp),\n      max: this.covertToFahrenheit(response.data.main.temp_max),\n      min:this.covertToFahrenheit(response.data.main.temp_min),\n      condition: response.data.weather[0].description\n    }\n    this.setState({\n      data:weather\n    }) \n    // seting icons\n    this.get_WeatherIcon(this.weatherIcon, response.data.weather[0].id);\n  })\n    .catch(err => {\n   console.log(err)\n })\n   \n}\n\n\n\nrender(){\n    return(\n     <div className=\"container mt-5\">\n\n      <Form  getWeather={this.getWeather} onChange={this.onChange}/>\n      <Weather weather={this.state.data} icon={this.state.icon}/>\n    \n     \n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}